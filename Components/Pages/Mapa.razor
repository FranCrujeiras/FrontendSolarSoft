@page "/mapa"
@using FrontBlazor.Components.Models
@using FrontBlazor.Components.Services
@using FrontBlazor.Components.Extensions
@rendermode InteractiveServer

<PageTitle>Mapa</PageTitle>

<div class="row d-flex align-items-center">
    <div class="col-sm-2">
        <Sidebar @ref="sidebar"
                 IconName="IconName.SunFill"
                 Title="SolarSoft"
                 DataProvider="SidebarDataProvider"
                 Style="font-weight:bolder; background-color: rgba(30,30,30,0.5)" />

    </div>
    <div class="col-sm-2">
        <center>
            <div style="width:85%">
                <div class="row d-flex align-items-baseline">
                    @*                         <div id="searchBoxContainer"class="col-4">
                    <input id="searchBox" type="text" />
                    </div> *@
                    <div class="ui-widget">
                        <label for="queryTbx">Your query: </label>
                        <input id="queryTbx">
                    </div>                    
                </div>
                <div class="row d-flex">
                    <label class="form-label mt-5">Seleccionar panel</label>
                    <select>
                        <input class="form-select form-control" placeholder="Seleccione un panel" style="z-index:99;background-color:rgba(255, 255, 255, 0.5)">
                        <option value="Modelo de Panel">Modelo de Panel</option>
                        @foreach (Panel panel in PanelService.GetPaneles())
                        {
                            <option value="@panel.Id">@panel.NombreModelo</option>
                        }
                    </select>
                </div>
                <input type="button" id="generador" value="Insertar paneles" class="form-control mt-2" />
                <input type="hidden" readonly Id="LargoPanel" class="form-control mt-1" placeholder="Largo del Panel" />
                <input type="hidden" readonly Id="AnchoPanel" class="form-control mt-1" placeholder="Ancho del Panel" />
                <input type="hidden" readonly Id="LongitudMapa" class="form-control mt-1" placeholder="Longitud" />
                <label class="form-label mt-3">Azimuth</label>
                <input readonly Id="AzimuthMapa" class="form-control mt-1" placeholder="Azimuth" />
                <label class="form-label mt-3">Área de la instalación</label>
                <input readonly id="area" class="form-control mt-1" placeholder="Área de la instalación" />
                <label class="form-label mt-3">Número de paneles</label>
                <input readonly id="NumeroMapa" class="form-control mt-1" placeholder="Número de paneles" />
                <input type="button" id="generador" value="Obtener formas" />
                @*  <div class="row">
                <input type="radio" name="DragMethodRadio" value="Pixel" checked="checked" onchange="setDragMethod(this)" /> Pixel
                <input type="radio" name="DragMethodRadio" value="Geo" onchange="setDragMethod(this)" /> Geo
                </div> *@


            </div>
        </center>
    </div>
    <div class="col-sm-8" style="padding:0;margin:0,0,0,0">
        @if (HaCargado)
        {
            //Faltaban estas tres referencias
            <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css">
            <script src="//code.jquery.com/jquery-1.12.4.js"></script>
            <script src="//code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

            <script type="text/javascript">
                var map, searchManager, dragManager, pin;
                var rotacion = 0;
                function GetMap() {
                    map = new Microsoft.Maps.Map('#myMap', {
                        center: new Microsoft.Maps.Location(42.23282, -8.72264),
                        mapTypeId: Microsoft.Maps.MapTypeId.aerial,
                        zoom: 12
                    });
                    Microsoft.Maps.loadModule(['Microsoft.Maps.AutoSuggest', 'Microsoft.Maps.Search'], function () {
                        //Create instances of the Autosuggest and Search managers.
                        var autosuggestManager = new Microsoft.Maps.AutosuggestManager({ map: map });
                        searchManager = new Microsoft.Maps.Search.SearchManager(map);

                        //Create a jQuery autocomplete UI widget.
                        $("#queryTbx").autocomplete({
                            minLength: 3,   //Don't ask for suggestions until atleast 3 characters have been typed.
                            source: function (request, response) {
                                //Get suggestions from the AutosuggestManager.
                                autosuggestManager.getSuggestions(request.term, response);
                            },
                            select: function (event, ui) {
                                //When a suggestion has been selected.

                                //Check to see if the suggestion has a location value.
                                if (ui.item.location) {
                                    suggestionSelected(ui.item);
                                } else {
                                    geocodeSuggestion(ui.item);
                                }
                            }
                        }).autocomplete("instance")._renderItem = function (ul, item) {
                            //Format the displayed suggestion to show the formatted suggestion string.
                            return $("<li>")
                                .append("<a>" + item.formattedSuggestion + "</a>")
                                .appendTo(ul);
                        };
                    });

                    Microsoft.Maps.registerModule('DraggableShapesModule', 'DraggableShapesModule.js');
                    Microsoft.Maps.loadModule('DraggableShapesModule', function () {
                        dragManager = new DraggableShapesManager(map);
                        dragManager.makeDraggable(polygon);
                    });
                }

                function setDragMethod(elm) {
                    if (elm.value === 'Pixel') {
                        dragManager.setDragMethod(DragMethod.pixel);
                    } else {
                        dragManager.setDragMethod(DragMethod.geo);
                    }
                }
                function geocodeSuggestion(suggestion) {
                    var searchRequest = {
                        where: suggestion.formattedSuggestion,
                        callback: function (r) {
                            if (r && r.results && r.results.length > 0) {
                                suggestion.location = r.results[0].location;
                                suggestion.bestView = r.results[0].bestView;

                                suggestionSelected(suggestion);
                            }
                        },
                        errorCallback: function (e) {
                            alert("Sin resultados");
                        }
                    };
                    searchManager.geocode(searchRequest);
                }

                function suggestionSelected(suggestion) {
                    map.entities.clear();

                    //Show the suggestion as a pushpin and center map over it.
                    //pin = new Microsoft.Maps.Pushpin(suggestion.location);
                    //map.entities.push(pin);

                    $('#area').val(suggestion.location.latitude + ',' + suggestion.location.longitude);
                    map.setView({ center: suggestion.location, zoom: 20 });
                }

                var interval;
                $("#generador").bind("click", function () {
                    var coordenadas = $('#area').val();
                    var latitud = coordenadas.split(',')[0];
                    var longitud = coordenadas.split(',')[1];
                    var width = $("#paneles").find(":selected").attr('w') / 111320 * 1000;
                    var height = ($("#paneles").find(":selected").attr('h') / 10000) / (111320 * Math.cos(latitud));
                    console.log(width);
                    console.log(height);
                    var polygon = new Microsoft.Maps.Polygon([
                        [new Microsoft.Maps.Location(latitud - 0.00004, longitud),
                        new Microsoft.Maps.Location(latitud - 0.000050, longitud),
                        new Microsoft.Maps.Location(latitud - 0.000050, longitud - 0.000010),
                        new Microsoft.Maps.Location(latitud - 0.00004, longitud - 0.000010)]]);
                    Microsoft.Maps.Events.addHandler(polygon, 'dblclick', function (e) {
                        AumentaRotacion(polygon);
                    });
                    dragManager.makeDraggable(polygon);
                    map.entities.push(polygon);
                });

                function AumentaRotacion(polygon) {
                    Microsoft.Maps.SpatialMath.Geometry.rotate(polygon, rotacion * Math.PI / 180);
                    rotacion++;
                }
            </script>

            <div class="row" style="height:100vh">
                <div class="col-12">
                    <div id="myMap" style="width:auto"></div>
                </div>
            </div>
        }
    </div>
</div>
@code {
    [SupplyParameterFromForm]
    public Terreno? Instalacion { get; set; }

    [Inject]
    public IPanelService? PanelService { get; set; }

    Sidebar sidebar = default!;
    IEnumerable<NavItem>? navItems;

    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (navItems is null)
            navItems = GetNavItems();

        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private IEnumerable<NavItem> GetNavItems()
    {
        navItems = new List<NavItem>
        {
            new NavItem { Id = "1", Href = "/Home", IconName = IconName.HouseDoorFill, Text = "Inicio"},

            new NavItem { Id = "2", Href="/", IconName = IconName.HouseAddFill, Text = "Nueva Instalación" },

            new NavItem { Id = "4", IconName = IconName.DatabaseFillAdd, Text = "Nuevo Componente" },
            new NavItem { Id = "5", Href = "/NuevoPanel", IconName = IconName.SunFill, Text = "Nuevo Panel", ParentId="4"},
            new NavItem { Id = "6", Href = "/NuevaBateria", IconName = IconName.BatteryCharging, Text = "Nueva Batería", ParentId="4"},
            new NavItem { Id = "7", Href = "/mapa", IconName = IconName.MapFill, Text= "Mapa"},

        };

        return navItems;
    }
    private void ToggleSidebar() => sidebar.ToggleSidebar();

    private void ObtenerPanel()
    {

    }

    private bool HaCargado { get; set; } = false;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            HaCargado = true;
            StateHasChanged();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

}

<style>
    :root {
        --bb-sidebar-width: 270px;
        --bb-sidebar-collapsed-width: 50px;
        --bb-sidebar-background-color: rgba(234, 234, 234, 1);
        --bb-sidebar-top-row-background-color: rgba(240,240,240,0.2);
        --bb-sidebar-top-row-border-color: rgba(240,240,240,0.6);
        --bb-sidebar-title-text-color: rgb(0,0,0);
        --bb-sidebar-brand-icon-color: #000000;
        --bb-sidebar-brand-image-width: 24px;
        --bb-sidebar-brand-image-height: 24px;
        --bb-sidebar-title-badge-text-color: rgb(255,255,255);
        --bb-sidebar-title-badge-background-color: rgba(25,135,84,var(--bs-bg-opacity,1));
        --bb-sidebar-navbar-toggler-icon-color: rgb(0,0,0);
        --bb-sidebar-navbar-toggler-background-color: rgba(0,0,0,0.08);
        --bb-sidebar-content-border-color: rgb(194,192,192);
        --bb-sidebar-nav-item-text-color: rgba(255,255,255,0.9);
        --bb-sidebar-nav-item-text-active-color-rgb: 255,255,255;
        --bb-sidebar-nav-item-text-hover-color: rgba(var(--bb-sidebar-nav-item-text-active-color-rgb),0.7);
        --bb-sidebar-nav-item-text-active-color: rgba(var(--bb-sidebar-nav-item-text-active-color-rgb),0.9);
        --bb-sidebar-nav-item-background-hover-color: rgba(var(--bb-sidebar-nav-item-text-active-color-rgb),0.08);
        --bb-sidebar-nav-item-group-background-color: rgba(var(--bb-sidebar-nav-item-text-active-color-rgb),0.08);
    }
</style>
