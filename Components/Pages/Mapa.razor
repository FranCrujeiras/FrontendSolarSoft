@page "/mapa"
@using FrontBlazor.Components.Models
@using FrontBlazor.Components.Services
@using FrontBlazor.Components.Extensions
@rendermode InteractiveServer

<PageTitle>Mapa</PageTitle>

@if (HaCargado)
{
    <div class="row d-flex align-items-center">
        <div class="col-sm-2">
            <Sidebar @ref="sidebar"
                     IconName="IconName.SunFill"
                     Title="SolarSoft"
                     DataProvider="SidebarDataProvider"
                     Style="font-weight:bolder; background-color: rgba(30,30,30,0.5)" />

        </div>
        <div class="col-sm-2">
            <center>
                <div style="width:85%">
                    <div class="row d-flex align-items-baseline">
                        <div id="searchBoxContainer"class="col-4">
                            <input id="searchBox" type="text" />
                            </div>
                            <div class="col2">
                            <input type="button" value="Buscar" onclick="Search()" />
                        </div>
                    </div>
                    
                    <label class="form-label mt-5">Seleccionar panel</label>
                    <input class="form-select form-control mt-1" placeholder="Seleccione un panel" style="z-index:99;background-color:rgba(255, 255, 255, 0.5)" />
                    @*                 @foreach (Panel panel in PanelService.GetPaneles())
                {
                <option value="@panel.Id">@panel.NombreModelo</option>
                } *@
                    <label class="form-label mt-3">Latitud</label>
                    <input readonly Id="LatitudMapa" class="form-control mt-1" style="align-items:center" placeholder="Latitud" />
                    <label class="form-label mt-3">Longitud</label>
                    <input readonly Id="LongitudMapa" class="form-control mt-1" placeholder="Longitud" />
                    <label class="form-label mt-3">Azimuth</label>
                    <input readonly Id="AzimuthMapa" class="form-control mt-1" placeholder="Azimuth" />
                    <label class="form-label mt-3">Área de la instalación</label>
                    <input readonly Id="AreaMapa" class="form-control mt-1" placeholder="Área de la instalación" />
                    <label class="form-label mt-3">Número de paneles</label>
                    <input readonly Id="NumeroMapa" class="form-control mt-1" placeholder="Número de paneles" />
                    <input type="button" value="Obtener formas" onclick="getShapes()" />
                </div>
            </center>
        </div>
        <div class="col-sm-8" style="padding:0;margin:0,0,0,0">
            <script type='text/javascript'>
                var map, searchManager;

                function GetMap() {
                    map = new Microsoft.Maps.Map('#myMap', {});

                    Microsoft.Maps.loadModule(['Microsoft.Maps.AutoSuggest', 'Microsoft.Maps.Search'], function () {
                        var manager = new Microsoft.Maps.AutosuggestManager({ map: map });
                        manager.attachAutosuggest('#searchBox', '#searchBoxContainer', suggestionSelected);

                        searchManager = new Microsoft.Maps.Search.SearchManager(map);
                    });
                }

                function suggestionSelected(result) {
                    //Remove previously results from the map.
                    map.entities.clear();

                    //Show the suggestion as a pushpin and center map over it.
                    var pin = new Microsoft.Maps.Pushpin(result.location);
                    map.entities.push(pin);

                    map.setView({ bounds: result.bestView });

                    document.getElementById('output').innerHTML = 'Selection:<br/>' + result.name;
                }

                function geocode() {
                    //Remove previously results from the map.
                    map.entities.clear();

                    //Get the users query and geocode it.
                    var query = document.getElementById('searchBox').value;

                    var searchRequest = {
                        where: query,
                        callback: function (r) {
                            if (r && r.results && r.results.length > 0) {
                                var pin, pins = [], locs = [], output = 'Results:<br/>';

                                //Add a pushpin for each result to the map and create a list to display.
                                for (var i = 0; i < r.results.length; i++) {
                                    //Create a pushpin for each result.
                                    pin = new Microsoft.Maps.Pushpin(r.results[i].location, {

                                        text: i + ''

                                    });

                                    pins.push(pin);
                                    locs.push(r.results[i].location);

                                    output += i + ') ' + r.results[i].name + '<br/>';
                                }

                                //Add the pins to the map
                                map.entities.push(pins);

                                //Display list of results
                                document.getElementById('output').innerHTML = output;

                                //Determine a bounding box to best view the results.
                                var bounds;

                                if (r.results.length == 1) {
                                    bounds = r.results[0].bestView;
                                } else {
                                    //Use the locations from the results to calculate a bounding box.
                                    bounds = Microsoft.Maps.LocationRect.fromLocations(locs);
                                }

                                map.setView({ bounds: bounds, padding: 30 });
                            }
                        },
                        errorCallback: function (e) {
                            document.getElementById('output').innerHTML = "No results found.";
                        }
                    };

                    //Make the geocode request.
                    searchManager.geocode(searchRequest);
                }
            </script>

            <div class="row" style="height:100vh">
                <div class="col-12">
                    <div id="myMap" style="width:auto"></div>

                </div>
            </div>
        </div>
    </div>
    @code {
    private bool HaCargado { get; set; } = false;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            HaCargado = true;
            StateHasChanged();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

}
}
@code {
    Sidebar sidebar = default!;
    IEnumerable<NavItem>? navItems;

    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (navItems is null)
            navItems = GetNavItems();

        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private IEnumerable<NavItem> GetNavItems()
    {
        navItems = new List<NavItem>
        {
            new NavItem { Id = "1", Href = "/Home", IconName = IconName.HouseDoorFill, Text = "Inicio"},

            new NavItem { Id = "2", Href="/", IconName = IconName.HouseAddFill, Text = "Nueva Instalación" },

            new NavItem { Id = "4", IconName = IconName.DatabaseFillAdd, Text = "Nuevo Componente" },
            new NavItem { Id = "5", Href = "/NuevoPanel", IconName = IconName.SunFill, Text = "Nuevo Panel", ParentId="4"},
            new NavItem { Id = "6", Href = "/NuevaBateria", IconName = IconName.BatteryCharging, Text = "Nueva Batería", ParentId="4"},
            new NavItem { Id = "7", Href = "/mapa", IconName = IconName.MapFill, Text= "Mapa"},

        };

        return navItems;
    }
    private void ToggleSidebar() => sidebar.ToggleSidebar();
}
}

<style>
    :root {
        --bb-sidebar-width: 270px;
        --bb-sidebar-collapsed-width: 50px;
        --bb-sidebar-background-color: rgba(234, 234, 234, 1);
        --bb-sidebar-top-row-background-color: rgba(240,240,240,0.2);
        --bb-sidebar-top-row-border-color: rgba(240,240,240,0.6);
        --bb-sidebar-title-text-color: rgb(0,0,0);
        --bb-sidebar-brand-icon-color: #000000;
        --bb-sidebar-brand-image-width: 24px;
        --bb-sidebar-brand-image-height: 24px;
        --bb-sidebar-title-badge-text-color: rgb(255,255,255);
        --bb-sidebar-title-badge-background-color: rgba(25,135,84,var(--bs-bg-opacity,1));
        --bb-sidebar-navbar-toggler-icon-color: rgb(0,0,0);
        --bb-sidebar-navbar-toggler-background-color: rgba(0,0,0,0.08);
        --bb-sidebar-content-border-color: rgb(194,192,192);
        --bb-sidebar-nav-item-text-color: rgba(255,255,255,0.9);
        --bb-sidebar-nav-item-text-active-color-rgb: 255,255,255;
        --bb-sidebar-nav-item-text-hover-color: rgba(var(--bb-sidebar-nav-item-text-active-color-rgb),0.7);
        --bb-sidebar-nav-item-text-active-color: rgba(var(--bb-sidebar-nav-item-text-active-color-rgb),0.9);
        --bb-sidebar-nav-item-background-hover-color: rgba(var(--bb-sidebar-nav-item-text-active-color-rgb),0.08);
        --bb-sidebar-nav-item-group-background-color: rgba(var(--bb-sidebar-nav-item-text-active-color-rgb),0.08);
    }
</style>
