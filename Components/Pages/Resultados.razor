@page "/graficoEnergia"
@using FrontBlazor.Components.Extensions
@using FrontBlazor.Components.Models
@using FrontBlazor.Components.Services
@using Newtonsoft.Json.Linq
@rendermode InteractiveServer
@if (Error)
{
    <div class="row">
        <div class="alert alert-danger mt-4">Los datos introducidos son erróneos. Revise de nuevo la ubicación e inténtelo otra vez.</div>
    </div>
}
@if (!Error)
{
    <div class="row" style=" z-index:1;background:linear-gradient(270deg, rgba(255,255,255,1) 0%, rgba(206,255,197,1) 100%); background-size:cover">
        <h3 class="mb-4" style="font-weight:bold;text-align:center;background:linear-gradient(270deg, rgba(255,255,255,1) 0%, rgba(206,255,197,1) 100%); background-size:cover">Resultados de la simulación</h3>
    </div>


    <div class="row" style=" z-index:1;background: linear-gradient(270deg, rgba(255,255,255,1) 0%, rgba(206,255,197,1) 100%); background-size:cover">
        <div class="col-sm-4">
            @*  <div class="row">
        <div class="col-1"></div>
        <div class="col-5" >

        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(80,22,0)"><i class="bi bi-cloud-check-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(80,22,0)">1,73 Tm CO2</h5>
        </div>
        <div class="row mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(0,80,30)"><i class="bi bi-tree-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(0,80,30)">49 Árboles/año</h5>
        </div>
        </div>
        <div class="col-5">
        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(80,90,0)"><i class="bi bi-lightning-charge"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(80,90,0)">343,51 kWh/mes</h5>
        </div>
        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(0,50,120)"><i class="bi bi-lightning-charge-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(0,50,120)">3,78 MWh/año</h5>
        </div>
        </div>

        </div> *@
           @*  <BarChart @ref="chartEnergia0" Class="mt-4 mb-3" />
            <div class="row">
                <div class="col-1"></div>
                <div class="col-5">

                    <div class="row-mb-3">
                        <h4 style="font-weight: bold;text-align:center;color:rgb(80,22,0)"><i class="bi bi-cloud-check-fill"></i></h4>
                        <h5 style="font-weight: bold;text-align:center;color:rgb(80,22,0)">@co2_0 Tm CO2</h5>
                    </div>
                    <div class="row mb-3">
                        <h4 style="font-weight: bold;text-align:center;color:rgb(0,80,30)"><i class="bi bi-tree-fill"></i></h4>
                        <h5 style="font-weight: bold;text-align:center;color:rgb(0,80,30)">@arboles0 Árboles/año</h5>
                    </div>
                </div>
                <div class="col-5">
                    <div class="row-mb-3">
                        <h4 style="font-weight: bold;text-align:center;color:rgb(80,90,0)"><i class="bi bi-lightning-charge"></i></h4>
                        <h5 style="font-weight: bold;text-align:center;color:rgb(80,90,0)">@media0 kWh/mes</h5>
                    </div>
                    <div class="row-mb-3">
                        <h4 style="font-weight: bold;text-align:center;color:rgb(0,50,120)"><i class="bi bi-lightning-charge-fill"></i></h4>
                        <h5 style="font-weight: bold;text-align:center;color:rgb(0,50,120)">@anual0 MWh/año</h5>
                    </div>
                </div>

            </div> *@
        </div>
        <div class="col-sm-4">
            @*             <div class="row">
        <div class="col-1"></div>
        <div class="col-5">

        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(80,22,0)"><i class="bi bi-cloud-check-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(80,22,0)">1,73 Tm CO2</h5>
        </div>
        <div class="row mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(0,80,30)"><i class="bi bi-tree-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(0,80,30)">49 Árboles/año</h5>
        </div>
        </div>
        <div class="col-5">
        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(80,90,0)"><i class="bi bi-lightning-charge"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(80,90,0)">343,51 kWh/mes</h5>
        </div>
        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(0,50,120)"><i class="bi bi-lightning-charge-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(0,50,120)">3,78 MWh/año</h5>
        </div>
        </div>

        </div> *@
            <BarChart @ref="chartBateria" Class="mt-4 mb-3"></BarChart>
            @*  <BarChart @ref="chartEnergia15" Class="mt-4 mb-3" />
        <div class="row">
        <div class="col-1"></div>
        <div class="col-5">

        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(80,22,0)"><i class="bi bi-cloud-check-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(80,22,0)">@co2_15 Tm CO2</h5>
        </div>
        <div class="row mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(0,80,30)"><i class="bi bi-tree-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(0,80,30)">@arboles15 Árboles/año</h5>
        </div>
        </div>
        <div class="col-5">
        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(80,90,0)"><i class="bi bi-lightning-charge"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(80,90,0)">@media15 kWh/mes</h5>
        </div>
        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(0,50,120)"><i class="bi bi-lightning-charge-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(0,50,120)">@anual15 MWh/año</h5>
        </div>
        </div>

        </div> *@
        </div>

        <div class="col-sm-4">
            @*             <div class="row">
        <div class="col-1"></div>
        <div class="col-5">

        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(80,22,0)"><i class="bi bi-cloud-check-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(80,22,0)">1,73 Tm CO2</h5>
        </div>
        <div class="row mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(0,80,30)"><i class="bi bi-tree-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(0,80,30)">49 Árboles/año</h5>
        </div>
        </div>
        <div class="col-5">
        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(80,90,0)"><i class="bi bi-lightning-charge"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(80,90,0)">343,51 kWh/mes</h5>
        </div>
        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(0,50,120)"><i class="bi bi-lightning-charge-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(0,50,120)">3,78 MWh/año</h5>
        </div>
        </div>

        </div> *@
            @*    <BarChart @ref="chartEnergia30" Class="mt-4 mb-3" />
        <div class="row">
        <div class="col-1"></div>
        <div class="col-5">

        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(80,22,0)"><i class="bi bi-cloud-check-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(80,22,0)">@co2_30 Tm CO2</h5>
        </div>
        <div class="row mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(0,80,30)"><i class="bi bi-tree-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(0,80,30)">@arboles30 Árboles/año</h5>
        </div>
        </div>
        <div class="col-5">
        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(80,90,0)"><i class="bi bi-lightning-charge"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(80,90,0)">@media30 kWh/mes</h5>
        </div>
        <div class="row-mb-3">
        <h4 style="font-weight: bold;text-align:center;color:rgb(0,50,120)"><i class="bi bi-lightning-charge-fill"></i></h4>
        <h5 style="font-weight: bold;text-align:center;color:rgb(0,50,120)">@anual30 MWh/año</h5>
        </div>
        </div>

        </div> *@
        </div>
    </div>
    <!--Lo dejo comentado hasta que no lo optimicemos, para cargar bien lo de la batería-->
    <div class="row" style=" z-index:1;background:linear-gradient(270deg, rgba(255,255,255,1) 0%, rgba(206,255,197,1) 100%); background-size:cover%">
        @*    <div class="col-sm-4">
    <div class="row">
    <BarChart @ref="chartIrradiacion0" Class="mt-4 mb-4" />
    </div>

    </div>
    <div class="col-sm-4">
    <BarChart @ref="chartIrradiacion15" Class="mt-4 mb-4" />
    </div>
    <div class="col-sm-4">
    <BarChart @ref="chartIrradiacion30" Class="mt-4 mb-4" />
    </div> *@
    </div>
}

}


@* <BarChart>

</BarChart> *@

@code {
    [Inject]
    public ObjectTransporter ObjectTransporter { get; set; }

    [Inject]
    private ITerrenoService? TerrenoService { get; set; }

    [Inject]
    private IBateriaService BateriaService { get; set; }

    private Terreno? Instalacion { get; set; }

    private Bateria? Bateria { get; set; }

    private double[] PatronConsumo { get; set; }

    private bool Error { get; set; } = false;

    private BarChart chartBateria = default!;

    private BarChart chartEnergia0 = default!;

    private BarChart chartEnergia15 = default!;

    private BarChart chartEnergia30 = default!;

    private BarChart chartIrradiacion0 = default!;

    private BarChart chartIrradiacion15 = default!;

    private BarChart chartIrradiacion30 = default!;

    //Esto lo pondremos mejor cuando añadamos el select
    private double media0 { get; set; } = default!;
    private double media15 { get; set; } = default!;
    private double media30 { get; set; } = default!;
    private double anual0 { get; set; } = default!;
    private double anual15 { get; set; } = default!;
    private double anual30 { get; set; } = default!;
    private double co2_0 { get; set; } = default!;
    private double co2_15 { get; set; } = default!;
    private double co2_30 { get; set; } = default!;
    private double arboles0 { get; set; } = default!;
    private double arboles15 { get; set; } = default!;
    private double arboles30 { get; set; } = default!;

    double[] displayExcedente = null;
    double[] displaycarga = null;

    protected override void OnInitialized()
    {
        Instalacion = (Terreno)ObjectTransporter.RetrieveData("Resultado");
        var bateriaSeleccionada = (Bateria)ObjectTransporter.RetrieveData("Bateria");
        string patronSelecionado = (string)ObjectTransporter.RetrieveData("Patron");
        PatronConsumo = BateriaService.GetPatron(patronSelecionado);
        Bateria = BateriaService.GetBateria(bateriaSeleccionada.Id);
        displayExcedente = CalculoExcedente(bateriaSeleccionada.ConsumoMensual);
        displaycarga = CargaBateria(displayExcedente, Bateria.Capacidad);
        // displayexcedente = CalculoExcedente();
        // displaycarga = CargaBateria();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        HttpClient client = new HttpClient()
            {
                BaseAddress = new Uri("https://localhost:7060/api/Terreno/")
            };
        Instalacion.AnguloEstructura = 0;
        // var response0 = client.GetAsync($"getPotenciaTotal/{Instalacion.Id}/{Instalacion.ModeloPanel}").Result;
        // if (response0.IsSuccessStatusCode)
        // {
        //     var potencia0 = response0.Content.ReadAsStringAsync().Result;
        //     Instalacion.PotenciaTotal = double.Parse(potencia0.Replace(".", ","));
        // }
        // var datos0 = TerrenoService.GetDataPVGIS(Instalacion);
        // await RenderizarGraficaEnergia(chartEnergia0, datos0, 175, 0);
        // await RenderizarGraficaIrradiacion(chartIrradiacion0, datos0, 255);
        // Instalacion.AnguloEstructura = 15;
        // var response15 = client.GetAsync($"getPotenciaTotal/{Instalacion.Id}/{Instalacion.ModeloPanel}").Result;
        // if (response15.IsSuccessStatusCode)
        // {
        //     var potencia15 = response15.Content.ReadAsStringAsync().Result;
        //     Instalacion.PotenciaTotal = double.Parse(potencia15.Replace(".", ","));
        // }
        // var datos15 = TerrenoService.GetDataPVGIS(Instalacion);
        // await RenderizarGraficaEnergia(chartEnergia15, datos15, 122, 15);
        // await RenderizarGraficaIrradiacion(chartIrradiacion15, datos15, 125);
        // Instalacion.AnguloEstructura = 30;
        // var response30 = client.GetAsync($"getPotenciaTotal/{Instalacion.Id}/{Instalacion.ModeloPanel}").Result;
        // if (response30.IsSuccessStatusCode)
        // {
        //     var potencia30 = response30.Content.ReadAsStringAsync().Result;
        //     Instalacion.PotenciaTotal = double.Parse(potencia30.Replace(".", ","));
        // }
        // var datos30 = TerrenoService.GetDataPVGIS(Instalacion);
        // await RenderizarGraficaEnergia(chartEnergia30, datos30, 90, 30);
        // await RenderizarGraficaIrradiacion(chartIrradiacion30, datos30, 80);

        await RenderizarGraficaBateria(chartBateria, displayExcedente, displaycarga, 175);
        //Dejo el resto en tus manos! Modifica lo RenderizarGrafica estos de arriba, para que reciban como valor también el color, para asignar un color por ángulo
        //Añade también a cada gráfica lo de las emisiones, árboles, y los títulos de qué es cada cosa

        await base.OnAfterRenderAsync(firstRender);
    }
    private async Task RenderizarGraficaEnergia(BarChart graficaObjetivo, string datos, int gColor, int angulo)
    {
        List<double> energia = new List<double>();
        if (datos != null)
        {
            var json = JObject.Parse(datos);
            var valores = json.SelectToken("outputs").SelectToken("monthly").SelectTokens("fixed").Cast<JArray>();
            //Con esto la obtendrías, necesitas algún valor más de PVGIS?
            //mmm pues la media mensual, para poner al lado de la gráfica
            //Márcamela en el texto
            switch (angulo)
            {
                case 0:
                    media0 = (double)json.SelectToken("outputs").SelectToken("totals").SelectToken("fixed").SelectToken("E_m");
                    anual0 = Math.Round(((double)json.SelectToken("outputs").SelectToken("totals").SelectToken("fixed").SelectToken("E_y")) / 1000, 2);
                    co2_0 = Math.Round(Convert.ToDouble(anual0) * 0.4, 2);
                    arboles0 = Math.Round(co2_0 * 45, 0);
                    break;
                case 15:
                    media15 = (double)json.SelectToken("outputs").SelectToken("totals").SelectToken("fixed").SelectToken("E_m");
                    anual15 = Math.Round(((double)json.SelectToken("outputs").SelectToken("totals").SelectToken("fixed").SelectToken("E_y")) / 1000, 2);
                    co2_15 = Math.Round(Convert.ToDouble(anual15) * 0.4, 2);
                    arboles15 = Math.Round(co2_15 * 45, 0);
                    break;
                case 30:
                    media30 = (double)json.SelectToken("outputs").SelectToken("totals").SelectToken("fixed").SelectToken("E_m");
                    anual30 = Math.Round(((double)json.SelectToken("outputs").SelectToken("totals").SelectToken("fixed").SelectToken("E_y")) / 1000, 2);
                    co2_30 = Math.Round(Convert.ToDouble(anual30) * 0.4, 2);
                    arboles30 = Math.Round(co2_30 * 45, 0);
                    break;
            }
            var mediaEnergia = Convert.ToDouble(json.SelectToken("outputs").SelectToken("totals").SelectToken("fixed").SelectToken("E_y"));
            var CO2Evitado = Math.Round(Convert.ToDouble(mediaEnergia) * 0.4, 2);
            var arbolesPlantados = CO2Evitado * 45;
            var mediaMensual = json.SelectToken("outputs").SelectToken("totals").SelectToken("fixed").SelectToken("E_m");

            foreach (var valor in valores)
            {
                foreach (var parametro in valor)
                {
                    energia.Add(double.Parse(parametro.SelectToken("E_m").ToString()));
                }
            }
            energia.Add(Convert.ToDouble(mediaMensual));

            var data = new ChartData
                {
                    Labels = new List<string> { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio",
             "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre", "Media" },
                    Datasets = new List<IChartDataset>()
         {
             new BarChartDataset()
             {
                 Label = "Energía (kWh)",
                 Data = energia,
                 BackgroundColor = new List<string>{ "rgb(0,"+ gColor+", 0)" },
                 CategoryPercentage = 0.8,
                 BarPercentage = 1,
             }
         }
                };

            var options = new BarChartOptions();

            options.Interaction.Mode = InteractionMode.Index;

            options.Plugins.Title!.Text = "Estimación mensual " + angulo + "º";
            options.Plugins.Title.Display = true;
            options.Plugins.Title.Font!.Size = 20;
            options.Plugins.Legend.Display = true;

            options.Responsive = true;

            options.Scales.X!.Title!.Text = "Mes";
            options.Scales.X.Title.Display = true;

            options.Scales.Y!.Title!.Text = "Energía generada";
            options.Scales.Y.Title.Display = true;

            await InvokeAsync(StateHasChanged);
            await graficaObjetivo.InitializeAsync(data, options);

        }
        else
        {
            Error = true;
        }
    }

    private async Task RenderizarGraficaIrradiacion(BarChart chartObjetivo, string datos, int yColor)
    {
        List<double> irradiacion = new List<double>();
        if (datos != null)
        {
            datos = datos.Replace("H(i)_m", "Him");
            var json = JObject.Parse(datos);
            var valores = json.SelectToken("outputs").SelectToken("monthly").SelectTokens("fixed").Cast<JArray>();
            foreach (var valor in valores)
            {
                foreach (var parametro in valor)
                {
                    irradiacion.Add(double.Parse(parametro.SelectToken("Him").ToString()));
                }
            }

            var data = new ChartData
                {
                    Labels = new List<string> {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio",
             "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" },
                    Datasets = new List<IChartDataset>()
        {
            new BarChartDataset()
            {
                Label = "Irradiación (W/m^2)",
                Data = irradiacion,
                BackgroundColor = new List<string>{ "rgb(0,0,"+yColor+")" },
                CategoryPercentage = 0.8,
                BarPercentage = 1,
            }
        }
                };

            var options = new BarChartOptions();

            options.Interaction.Mode = InteractionMode.Index;

            options.Plugins.Title!.Text = "Irradiación mensual estimada";
            options.Plugins.Title.Display = true;
            options.Plugins.Title.Font!.Size = 20;

            options.Responsive = true;

            options.Scales.X!.Title!.Text = "Mes";
            options.Scales.X.Title.Display = true;

            options.Scales.Y!.Title!.Text = "Total";
            options.Scales.Y.Title.Display = true;

            await chartObjetivo.InitializeAsync(data, options);

        }
        else
        {
            Error = true;
        }
    }

    private async Task RenderizarGraficaBateria(BarChart chartObjetivo, double[] excedente, double[] carga, int yColor)
    {
        var data = new ChartData
            {
                Labels = new List<string> {"00:00", "01:00", "02:00", "03:00", "04:00", "05:00",
             "06:00", "07:00", "08:00", "09:00", "10:00", "11:00",
            "12:00", "13:00", "14:00", "15:00", "16:00", "17:00",
            "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"},
                Datasets = new List<IChartDataset>()
        {
            new BarChartDataset()
            {
                Label = "Excedente (kWh)",
                Data = excedente.ToList(),
                BackgroundColor = new List<string>{ "rgb(0,0,"+yColor+")" },
                CategoryPercentage = 0.8,
                BarPercentage = 1,
            },
            new BarChartDataset()
            {
                Label = "% Cargado",
                Data = carga.ToList(),
                BackgroundColor = new List<string>{ "rgb(0,0,"+33+")" },
                CategoryPercentage = 0.8,
                BarPercentage = 1,
            }
        }
            };

        var options = new BarChartOptions();

        options.Interaction.Mode = InteractionMode.Index;

        options.Plugins.Title!.Text = "Excedentes y % carga de la batería";
        options.Plugins.Title.Display = true;
        options.Plugins.Title.Font!.Size = 20;

        options.Responsive = true;

        options.Scales.X!.Title!.Text = "Hora";
        options.Scales.X.Title.Display = true;

        options.Scales.Y!.Title!.Text = "Excedente";
        options.Scales.Y.Title.Display = true;


        await InvokeAsync(StateHasChanged);
        await chartObjetivo.InitializeAsync(data, options);

    }

    #region Cálculos batería

    private double[] CalculoExcedente(double ConsumoMensual)
    {
        double[] EnergiaDiaria = new double[24];
        double[] ArrayProduccionSolar = new double[24];
        ArrayProduccionSolar = BateriaService.GetPatron("Producción del panel");
        for (int i = 0; i < ArrayProduccionSolar.Length; i++)
        {
            EnergiaDiaria[i] = ArrayProduccionSolar[i] * Convert.ToDouble(Instalacion.PotenciaTotal);
        }
        double[] ArrayConsumo = PatronConsumo;
        double[] ConsumoHorario = new double[24];

        for (int i = 0; i < ArrayConsumo.Length; i++)
        {
            ConsumoHorario[i] = ArrayConsumo[i] * (ConsumoMensual / 30);
        }

        double[] Excedente = new double[24];

        for (int i = 0; i < EnergiaDiaria.Length; i++)
        {
            double resta = EnergiaDiaria[i] - ConsumoHorario[i];
            Excedente[i] = (resta < 0) ? 0 : resta;
        }
        return Excedente;
    }
    private double[] CargaBateria(double[] Excedente, double CapacidadBateria)
    {
        double CargaHora;
        double[] PorcentajesCarga = new double[24];
        for (int i = 0; i < Excedente.Length; i++)
        {
            CargaHora = ((CapacidadBateria - Excedente[i]) / CapacidadBateria) / 100;
            if (i != 0)
            {
                PorcentajesCarga[i] = CargaHora + PorcentajesCarga[i - 1];
                if (PorcentajesCarga[i] > 100)
                {
                    PorcentajesCarga[i] = 100;
                }
            }
            else
            {

            }

        }
        return PorcentajesCarga;
    }

    #endregion
}
